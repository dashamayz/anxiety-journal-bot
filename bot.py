import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import asyncio

API_TOKEN = '7533510582:AAG57QLCTjCNVzSs6kc00YgeH1sWLbrY9QA'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler()

class JournalStates(StatesGroup):
    morning_feeling = State()
    morning_worry = State()
    morning_power = State()
    morning_enough = State()
    evening_done = State()
    evening_helped = State()
    evening_message = State()

# Start command
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ üßò‚Äç‚ôÄÔ∏è\n–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/morning ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n/evening ‚Äî –≤–µ—á–µ—Ä–Ω–∏–µ\n/plan ‚Äî –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\n/tension ‚Äî —Ä–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–≥–æ–π")

# Morning flow
@dp.message_handler(commands=['morning'])
async def morning_start(message: types.Message):
    await message.answer("‚òÄÔ∏è –ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å?")
    await JournalStates.morning_feeling.set()

@dp.message_handler(state=JournalStates.morning_feeling)
async def morning_worry(message: types.Message, state: FSMContext):
    await state.update_data(feeling=message.text)
    await message.answer("–ß—Ç–æ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–≤–æ–∂–∏—Ç?")
    await JournalStates.morning_worry.set()

@dp.message_handler(state=JournalStates.morning_worry)
async def morning_power(message: types.Message, state: FSMContext):
    await state.update_data(worry=message.text)
    await message.answer("–ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ç–≤–æ–∏—Ö —Å–∏–ª–∞—Ö —Å–µ–≥–æ–¥–Ω—è:")
    await JournalStates.morning_power.set()

@dp.message_handler(state=JournalStates.morning_power)
async def morning_enough(message: types.Message, state: FSMContext):
    await state.update_data(power=message.text)
    await message.answer("–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è *–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ*, –∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ?", parse_mode=ParseMode.MARKDOWN)
    await JournalStates.morning_enough.set()

@dp.message_handler(state=JournalStates.morning_enough)
async def morning_done(message: types.Message, state: FSMContext):
    await state.update_data(enough=message.text)
    data = await state.get_data()
    summary = f"\n‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω:\n–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å: {data['feeling']}\n–¢—Ä–µ–≤–æ–∂–∏—Ç: {data['worry']}\n–í —Å–∏–ª–∞—Ö: {data['power']}\n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ: {data['enough']}"
    await message.answer(summary)
    await state.finish()

# Evening flow
@dp.message_handler(commands=['evening'])
async def evening_start(message: types.Message):
    await message.answer("üåô –ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë-—Ç–∞–∫–∏ —Å–¥–µ–ª–∞–ª–∞?")
    await JournalStates.evening_done.set()

@dp.message_handler(state=JournalStates.evening_done)
async def evening_helped(message: types.Message, state: FSMContext):
    await state.update_data(done=message.text)
    await message.answer("–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–ª–æ?")
    await JournalStates.evening_helped.set()

@dp.message_handler(state=JournalStates.evening_helped)
async def evening_message(message: types.Message, state: FSMContext):
    await state.update_data(helped=message.text)
    await message.answer("–ß—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ –Ω–∞ –Ω–æ—á—å?")
    await JournalStates.evening_message.set()

@dp.message_handler(state=JournalStates.evening_message)
async def evening_summary(message: types.Message, state: FSMContext):
    await state.update_data(night_msg=message.text)
    data = await state.get_data()
    summary = f"üåô –í–µ—á–µ—Ä–Ω–∏–π –∏—Ç–æ–≥:\n–°–¥–µ–ª–∞–ª–∞: {data['done']}\n–ü–æ–º–æ–≥–ª–æ: {data['helped']}\n–°–µ–±–µ –Ω–∞ –Ω–æ—á—å: {data['night_msg']}"
    await message.answer(summary)
    await state.finish()

# Plan handler
@dp.message_handler(commands=['plan'])
async def plan(message: types.Message):
    await message.answer("üóÇ –ù–∞–ø–∏—à–∏ 1‚Äì3 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ 1‚Äì2 –ø–æ –∂–µ–ª–∞–Ω–∏—é:")

# Tension handler
@dp.message_handler(commands=['tension'])
async def tension(message: types.Message):
    await message.answer("üòü –ß—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç?")
    await asyncio.sleep(5)
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å: —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?")
    await asyncio.sleep(5)
    await message.answer("–ß—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ –≤–º–µ—Å—Ç–æ —Ç—Ä–µ–≤–æ–∂–Ω–æ–π –º—ã—Å–ª–∏?\nüí¨ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –º—ã—Å–ª—å, –Ω–µ —Ñ–∞–∫—Ç. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è üíô")

# Schedule daily messages (optional)
async def schedule_messages():
    scheduler.add_job(send_morning_prompt, 'cron', hour=9)
    scheduler.add_job(send_evening_prompt, 'cron', hour=20)
    scheduler.start()

async def send_morning_prompt():
    await bot.send_message(CHAT_ID, "/morning")

async def send_evening_prompt():
    await bot.send_message(CHAT_ID, "/evening")

if __name__ == '__main__':
    # asyncio.create_task(schedule_messages())  # enable if you know your chat_id
    executor.start_polling(dp, skip_updates=True)
