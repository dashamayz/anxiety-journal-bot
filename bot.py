import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

API_TOKEN = os.getenv('API_TOKEN')

bot = Bot(token=7533510582:AAG57QLCTjCNVzSs6kc00YgeH1sWLbrY9QA)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# === üîπ –ö–æ–º–∞–Ω–¥—ã ===

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ /id, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π chat_id.")

@dp.message_handler(commands=['id'])
async def id_cmd(message: types.Message):
    await message.reply(f"–¢–≤–æ–π chat_id: {message.chat.id}")

# === üîπ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ===

CHAT_ID = int(os.getenv('CHAT_ID', ''))  # —Å—é–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π chat_id –≤ Render

async def send_morning_message():
    try:
        await bot.send_message(CHAT_ID, "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è] {e}")

async def send_evening_message():
    try:
        await bot.send_message(CHAT_ID, "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è?")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è] {e}")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
scheduler.add_job(send_morning_message, 'cron', hour=9, minute=0)
scheduler.add_job(send_evening_message, 'cron', hour=20, minute=0)

scheduler.start()

# === üîπ –ó–∞–ø—É—Å–∫ ===

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
